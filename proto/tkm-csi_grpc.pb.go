// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: tkm-csi.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TkmCsiService_LoadKernelImage_FullMethodName   = "/tkmCsi.TkmCsiService/LoadKernelImage"
	TkmCsiService_UnloadKernelImage_FullMethodName = "/tkmCsi.TkmCsiService/UnloadKernelImage"
)

// TkmCsiServiceClient is the client API for TkmCsiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TkmCsiServiceClient interface {
	LoadKernelImage(ctx context.Context, in *LoadKernelImageRequest, opts ...grpc.CallOption) (*LoadKernelImageResponse, error)
	UnloadKernelImage(ctx context.Context, in *UnloadKernelImageRequest, opts ...grpc.CallOption) (*UnloadKernelImageResponse, error)
}

type tkmCsiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTkmCsiServiceClient(cc grpc.ClientConnInterface) TkmCsiServiceClient {
	return &tkmCsiServiceClient{cc}
}

func (c *tkmCsiServiceClient) LoadKernelImage(ctx context.Context, in *LoadKernelImageRequest, opts ...grpc.CallOption) (*LoadKernelImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoadKernelImageResponse)
	err := c.cc.Invoke(ctx, TkmCsiService_LoadKernelImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tkmCsiServiceClient) UnloadKernelImage(ctx context.Context, in *UnloadKernelImageRequest, opts ...grpc.CallOption) (*UnloadKernelImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnloadKernelImageResponse)
	err := c.cc.Invoke(ctx, TkmCsiService_UnloadKernelImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TkmCsiServiceServer is the server API for TkmCsiService service.
// All implementations must embed UnimplementedTkmCsiServiceServer
// for forward compatibility.
type TkmCsiServiceServer interface {
	LoadKernelImage(context.Context, *LoadKernelImageRequest) (*LoadKernelImageResponse, error)
	UnloadKernelImage(context.Context, *UnloadKernelImageRequest) (*UnloadKernelImageResponse, error)
	mustEmbedUnimplementedTkmCsiServiceServer()
}

// UnimplementedTkmCsiServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTkmCsiServiceServer struct{}

func (UnimplementedTkmCsiServiceServer) LoadKernelImage(context.Context, *LoadKernelImageRequest) (*LoadKernelImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadKernelImage not implemented")
}
func (UnimplementedTkmCsiServiceServer) UnloadKernelImage(context.Context, *UnloadKernelImageRequest) (*UnloadKernelImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnloadKernelImage not implemented")
}
func (UnimplementedTkmCsiServiceServer) mustEmbedUnimplementedTkmCsiServiceServer() {}
func (UnimplementedTkmCsiServiceServer) testEmbeddedByValue()                       {}

// UnsafeTkmCsiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TkmCsiServiceServer will
// result in compilation errors.
type UnsafeTkmCsiServiceServer interface {
	mustEmbedUnimplementedTkmCsiServiceServer()
}

func RegisterTkmCsiServiceServer(s grpc.ServiceRegistrar, srv TkmCsiServiceServer) {
	// If the following call pancis, it indicates UnimplementedTkmCsiServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TkmCsiService_ServiceDesc, srv)
}

func _TkmCsiService_LoadKernelImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadKernelImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TkmCsiServiceServer).LoadKernelImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TkmCsiService_LoadKernelImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TkmCsiServiceServer).LoadKernelImage(ctx, req.(*LoadKernelImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TkmCsiService_UnloadKernelImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnloadKernelImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TkmCsiServiceServer).UnloadKernelImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TkmCsiService_UnloadKernelImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TkmCsiServiceServer).UnloadKernelImage(ctx, req.(*UnloadKernelImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TkmCsiService_ServiceDesc is the grpc.ServiceDesc for TkmCsiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TkmCsiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tkmCsi.TkmCsiService",
	HandlerType: (*TkmCsiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadKernelImage",
			Handler:    _TkmCsiService_LoadKernelImage_Handler,
		},
		{
			MethodName: "UnloadKernelImage",
			Handler:    _TkmCsiService_UnloadKernelImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tkm-csi.proto",
}
